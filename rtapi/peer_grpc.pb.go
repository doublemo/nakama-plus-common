// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: peer.proto

package rtapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NakamaPeerApi_Call_FullMethodName   = "/nakama.peer.NakamaPeerApi/Call"
	NakamaPeerApi_Stream_FullMethodName = "/nakama.peer.NakamaPeerApi/Stream"
)

// NakamaPeerApiClient is the client API for NakamaPeerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NakamaPeerApiClient interface {
	Call(ctx context.Context, in *NakamaPeer_Envelope, opts ...grpc.CallOption) (*NakamaPeer_Envelope, error)
	Stream(ctx context.Context, in *NakamaPeer_Envelope, opts ...grpc.CallOption) (*NakamaPeer_Envelope, error)
}

type nakamaPeerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewNakamaPeerApiClient(cc grpc.ClientConnInterface) NakamaPeerApiClient {
	return &nakamaPeerApiClient{cc}
}

func (c *nakamaPeerApiClient) Call(ctx context.Context, in *NakamaPeer_Envelope, opts ...grpc.CallOption) (*NakamaPeer_Envelope, error) {
	out := new(NakamaPeer_Envelope)
	err := c.cc.Invoke(ctx, NakamaPeerApi_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaPeerApiClient) Stream(ctx context.Context, in *NakamaPeer_Envelope, opts ...grpc.CallOption) (*NakamaPeer_Envelope, error) {
	out := new(NakamaPeer_Envelope)
	err := c.cc.Invoke(ctx, NakamaPeerApi_Stream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NakamaPeerApiServer is the server API for NakamaPeerApi service.
// All implementations must embed UnimplementedNakamaPeerApiServer
// for forward compatibility
type NakamaPeerApiServer interface {
	Call(context.Context, *NakamaPeer_Envelope) (*NakamaPeer_Envelope, error)
	Stream(context.Context, *NakamaPeer_Envelope) (*NakamaPeer_Envelope, error)
	mustEmbedUnimplementedNakamaPeerApiServer()
}

// UnimplementedNakamaPeerApiServer must be embedded to have forward compatible implementations.
type UnimplementedNakamaPeerApiServer struct {
}

func (UnimplementedNakamaPeerApiServer) Call(context.Context, *NakamaPeer_Envelope) (*NakamaPeer_Envelope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedNakamaPeerApiServer) Stream(context.Context, *NakamaPeer_Envelope) (*NakamaPeer_Envelope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedNakamaPeerApiServer) mustEmbedUnimplementedNakamaPeerApiServer() {}

// UnsafeNakamaPeerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NakamaPeerApiServer will
// result in compilation errors.
type UnsafeNakamaPeerApiServer interface {
	mustEmbedUnimplementedNakamaPeerApiServer()
}

func RegisterNakamaPeerApiServer(s grpc.ServiceRegistrar, srv NakamaPeerApiServer) {
	s.RegisterService(&NakamaPeerApi_ServiceDesc, srv)
}

func _NakamaPeerApi_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NakamaPeer_Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaPeerApiServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NakamaPeerApi_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaPeerApiServer).Call(ctx, req.(*NakamaPeer_Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _NakamaPeerApi_Stream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NakamaPeer_Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaPeerApiServer).Stream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NakamaPeerApi_Stream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaPeerApiServer).Stream(ctx, req.(*NakamaPeer_Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

// NakamaPeerApi_ServiceDesc is the grpc.ServiceDesc for NakamaPeerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NakamaPeerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.peer.NakamaPeerApi",
	HandlerType: (*NakamaPeerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _NakamaPeerApi_Call_Handler,
		},
		{
			MethodName: "Stream",
			Handler:    _NakamaPeerApi_Stream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer.proto",
}
