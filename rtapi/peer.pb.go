// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.10
// source: peer.proto

package rtapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NakamaPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer) Reset() {
	*x = NakamaPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer) ProtoMessage() {}

func (x *NakamaPeer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer.ProtoReflect.Descriptor instead.
func (*NakamaPeer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

type NakamaPeer_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InboxAddress string                 `protobuf:"bytes,2,opt,name=inboxAddress,proto3" json:"inboxAddress,omitempty"`
	Node         string                 `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Gossip       *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=gossip,proto3" json:"gossip,omitempty"`
	Infected     map[string]bool        `protobuf:"bytes,6,rep,name=infected,proto3" json:"infected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Types that are assignable to Payload:
	//
	//	*NakamaPeer_Frame_Envelope
	//	*NakamaPeer_Frame_KickedOut
	//	*NakamaPeer_Frame_Status
	//	*NakamaPeer_Frame_Track
	//	*NakamaPeer_Frame_Untrack
	//	*NakamaPeer_Frame_Broadcast
	//	*NakamaPeer_Frame_TrackUpdate
	Payload isNakamaPeer_Frame_Payload `protobuf_oneof:"payload"`
}

func (x *NakamaPeer_Frame) Reset() {
	*x = NakamaPeer_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Frame) ProtoMessage() {}

func (x *NakamaPeer_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Frame.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Frame) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NakamaPeer_Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Frame) GetInboxAddress() string {
	if x != nil {
		return x.InboxAddress
	}
	return ""
}

func (x *NakamaPeer_Frame) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NakamaPeer_Frame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NakamaPeer_Frame) GetGossip() *wrapperspb.BoolValue {
	if x != nil {
		return x.Gossip
	}
	return nil
}

func (x *NakamaPeer_Frame) GetInfected() map[string]bool {
	if x != nil {
		return x.Infected
	}
	return nil
}

func (m *NakamaPeer_Frame) GetPayload() isNakamaPeer_Frame_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *NakamaPeer_Frame) GetEnvelope() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Envelope); ok {
		return x.Envelope
	}
	return nil
}

func (x *NakamaPeer_Frame) GetKickedOut() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_KickedOut); ok {
		return x.KickedOut
	}
	return nil
}

func (x *NakamaPeer_Frame) GetStatus() *NakamaPeer_Status {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Status); ok {
		return x.Status
	}
	return nil
}

func (x *NakamaPeer_Frame) GetTrack() *NakamaPeer_Presence {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Track); ok {
		return x.Track
	}
	return nil
}

func (x *NakamaPeer_Frame) GetUntrack() *NakamaPeer_Untrack {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Untrack); ok {
		return x.Untrack
	}
	return nil
}

func (x *NakamaPeer_Frame) GetBroadcast() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Broadcast); ok {
		return x.Broadcast
	}
	return nil
}

func (x *NakamaPeer_Frame) GetTrackUpdate() *NakamaPeer_Presence {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_TrackUpdate); ok {
		return x.TrackUpdate
	}
	return nil
}

type isNakamaPeer_Frame_Payload interface {
	isNakamaPeer_Frame_Payload()
}

type NakamaPeer_Frame_Envelope struct {
	Envelope *NakamaPeer_Envelope `protobuf:"bytes,7,opt,name=envelope,proto3,oneof"`
}

type NakamaPeer_Frame_KickedOut struct {
	KickedOut *NakamaPeer_Envelope `protobuf:"bytes,8,opt,name=kickedOut,proto3,oneof"`
}

type NakamaPeer_Frame_Status struct {
	Status *NakamaPeer_Status `protobuf:"bytes,9,opt,name=status,proto3,oneof"`
}

type NakamaPeer_Frame_Track struct {
	Track *NakamaPeer_Presence `protobuf:"bytes,10,opt,name=track,proto3,oneof"`
}

type NakamaPeer_Frame_Untrack struct {
	Untrack *NakamaPeer_Untrack `protobuf:"bytes,11,opt,name=untrack,proto3,oneof"`
}

type NakamaPeer_Frame_Broadcast struct {
	Broadcast *NakamaPeer_Envelope `protobuf:"bytes,12,opt,name=broadcast,proto3,oneof"`
}

type NakamaPeer_Frame_TrackUpdate struct {
	TrackUpdate *NakamaPeer_Presence `protobuf:"bytes,13,opt,name=trackUpdate,proto3,oneof"`
}

func (*NakamaPeer_Frame_Envelope) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_KickedOut) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Status) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Track) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Untrack) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Broadcast) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_TrackUpdate) isNakamaPeer_Frame_Payload() {}

type NakamaPeer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Frames    []*NakamaPeer_Frame    `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	Presences []*NakamaPeer_Presence `protobuf:"bytes,3,rep,name=Presences,proto3" json:"Presences,omitempty"`
}

func (x *NakamaPeer_State) Reset() {
	*x = NakamaPeer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_State) ProtoMessage() {}

func (x *NakamaPeer_State) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_State.ProtoReflect.Descriptor instead.
func (*NakamaPeer_State) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NakamaPeer_State) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NakamaPeer_State) GetFrames() []*NakamaPeer_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *NakamaPeer_State) GetPresences() []*NakamaPeer_Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type NakamaPeer_Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient   []string          `protobuf:"bytes,1,rep,name=recipient,proto3" json:"recipient,omitempty"`
	Reason      uint32            `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Context     map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSessionID bool              `protobuf:"varint,4,opt,name=IsSessionID,proto3" json:"IsSessionID,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*NakamaPeer_Envelope_NakamaEnvelope
	//	*NakamaPeer_Envelope_Bytes
	Payload isNakamaPeer_Envelope_Payload `protobuf_oneof:"payload"`
}

func (x *NakamaPeer_Envelope) Reset() {
	*x = NakamaPeer_Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Envelope) ProtoMessage() {}

func (x *NakamaPeer_Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Envelope.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Envelope) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NakamaPeer_Envelope) GetRecipient() []string {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *NakamaPeer_Envelope) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetIsSessionID() bool {
	if x != nil {
		return x.IsSessionID
	}
	return false
}

func (m *NakamaPeer_Envelope) GetPayload() isNakamaPeer_Envelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetNakamaEnvelope() *Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Envelope_NakamaEnvelope); ok {
		return x.NakamaEnvelope
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetBytes() []byte {
	if x, ok := x.GetPayload().(*NakamaPeer_Envelope_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isNakamaPeer_Envelope_Payload interface {
	isNakamaPeer_Envelope_Payload()
}

type NakamaPeer_Envelope_NakamaEnvelope struct {
	NakamaEnvelope *Envelope `protobuf:"bytes,5,opt,name=nakamaEnvelope,proto3,oneof"`
}

type NakamaPeer_Envelope_Bytes struct {
	Bytes []byte `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"`
}

func (*NakamaPeer_Envelope_NakamaEnvelope) isNakamaPeer_Envelope_Payload() {}

func (*NakamaPeer_Envelope_Bytes) isNakamaPeer_Envelope_Payload() {}

type NakamaPeer_Untrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID  string                       `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID     string                       `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream     []*NakamaPeer_PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Modes      []uint32                     `protobuf:"varint,4,rep,packed,name=modes,proto3" json:"modes,omitempty"`
	Reason     uint32                       `protobuf:"varint,5,opt,name=reason,proto3" json:"reason,omitempty"`
	SkipStream *NakamaPeer_PresenceStream   `protobuf:"bytes,6,opt,name=skipStream,proto3" json:"skipStream,omitempty"`
}

func (x *NakamaPeer_Untrack) Reset() {
	*x = NakamaPeer_Untrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Untrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Untrack) ProtoMessage() {}

func (x *NakamaPeer_Untrack) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Untrack.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Untrack) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 3}
}

func (x *NakamaPeer_Untrack) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Untrack) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Untrack) GetStream() []*NakamaPeer_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *NakamaPeer_Untrack) GetModes() []uint32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *NakamaPeer_Untrack) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *NakamaPeer_Untrack) GetSkipStream() *NakamaPeer_PresenceStream {
	if x != nil {
		return x.SkipStream
	}
	return nil
}

type NakamaPeer_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health         int32   `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	SessionCount   int32   `protobuf:"varint,3,opt,name=sessionCount,proto3" json:"sessionCount,omitempty"`
	PresenceCount  int32   `protobuf:"varint,4,opt,name=presenceCount,proto3" json:"presenceCount,omitempty"`
	MatchCount     int32   `protobuf:"varint,5,opt,name=matchCount,proto3" json:"matchCount,omitempty"`
	GoroutineCount int32   `protobuf:"varint,6,opt,name=goroutineCount,proto3" json:"goroutineCount,omitempty"`
	AvgLatencyMs   float64 `protobuf:"fixed64,7,opt,name=avgLatencyMs,proto3" json:"avgLatencyMs,omitempty"`
	AvgRateSec     float64 `protobuf:"fixed64,8,opt,name=avgRateSec,proto3" json:"avgRateSec,omitempty"`
	AvgInputKbs    float64 `protobuf:"fixed64,9,opt,name=avgInputKbs,proto3" json:"avgInputKbs,omitempty"`
	AvgOutputKbs   float64 `protobuf:"fixed64,10,opt,name=avgOutputKbs,proto3" json:"avgOutputKbs,omitempty"`
}

func (x *NakamaPeer_Status) Reset() {
	*x = NakamaPeer_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Status) ProtoMessage() {}

func (x *NakamaPeer_Status) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Status.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Status) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 4}
}

func (x *NakamaPeer_Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NakamaPeer_Status) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *NakamaPeer_Status) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetPresenceCount() int32 {
	if x != nil {
		return x.PresenceCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetGoroutineCount() int32 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgRateSec() float64 {
	if x != nil {
		return x.AvgRateSec
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgInputKbs() float64 {
	if x != nil {
		return x.AvgInputKbs
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgOutputKbs() float64 {
	if x != nil {
		return x.AvgOutputKbs
	}
	return 0
}

type NakamaPeer_Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID              string                       `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID                 string                       `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream                 []*NakamaPeer_PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Meta                   []*NakamaPeer_PresenceMeta   `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	AllowIfFirstForSession bool                         `protobuf:"varint,5,opt,name=allowIfFirstForSession,proto3" json:"allowIfFirstForSession,omitempty"`
}

func (x *NakamaPeer_Presence) Reset() {
	*x = NakamaPeer_Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Presence) ProtoMessage() {}

func (x *NakamaPeer_Presence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Presence.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Presence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 5}
}

func (x *NakamaPeer_Presence) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Presence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Presence) GetStream() []*NakamaPeer_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *NakamaPeer_Presence) GetMeta() []*NakamaPeer_PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NakamaPeer_Presence) GetAllowIfFirstForSession() bool {
	if x != nil {
		return x.AllowIfFirstForSession
	}
	return false
}

type NakamaPeer_PresenceStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject    string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *NakamaPeer_PresenceStream) Reset() {
	*x = NakamaPeer_PresenceStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_PresenceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_PresenceStream) ProtoMessage() {}

func (x *NakamaPeer_PresenceStream) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_PresenceStream.ProtoReflect.Descriptor instead.
func (*NakamaPeer_PresenceStream) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 6}
}

func (x *NakamaPeer_PresenceStream) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *NakamaPeer_PresenceStream) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *NakamaPeer_PresenceStream) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *NakamaPeer_PresenceStream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type NakamaPeer_PresenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionFormat uint32 `protobuf:"varint,1,opt,name=sessionFormat,proto3" json:"sessionFormat,omitempty"`
	Hidden        bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence   bool   `protobuf:"varint,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason        uint32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NakamaPeer_PresenceMeta) Reset() {
	*x = NakamaPeer_PresenceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_PresenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_PresenceMeta) ProtoMessage() {}

func (x *NakamaPeer_PresenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_PresenceMeta.ProtoReflect.Descriptor instead.
func (*NakamaPeer_PresenceMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 7}
}

func (x *NakamaPeer_PresenceMeta) GetSessionFormat() uint32 {
	if x != nil {
		return x.SessionFormat
	}
	return 0
}

func (x *NakamaPeer_PresenceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *NakamaPeer_PresenceMeta) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *NakamaPeer_PresenceMeta) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NakamaPeer_PresenceMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NakamaPeer_PresenceMeta) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type NakamaPeer_NodeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vars map[string]string `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ip   string            `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32            `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Role string            `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *NakamaPeer_NodeMeta) Reset() {
	*x = NakamaPeer_NodeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_NodeMeta) ProtoMessage() {}

func (x *NakamaPeer_NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_NodeMeta.ProtoReflect.Descriptor instead.
func (*NakamaPeer_NodeMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 8}
}

func (x *NakamaPeer_NodeMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NakamaPeer_NodeMeta) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *NakamaPeer_NodeMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NakamaPeer_NodeMeta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NakamaPeer_NodeMeta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x14, 0x0a, 0x0a, 0x4e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x89, 0x06, 0x0a, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65,
	0x65, 0x72, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x3b, 0x0a,
	0x0d, 0x49, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xf5, 0x01, 0x0a,
	0x07, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a,
	0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x1a, 0xd0, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67,
	0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4b, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x1a, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a,
	0xcf, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0xa9, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x12, 0x4a, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x20, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x4c, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x20, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x68, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x42, 0x0a, 0x4e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x72, 0x74, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0f, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_peer_proto_goTypes = []interface{}{
	(*NakamaPeer)(nil),                // 0: nakama.peer.NakamaPeer
	(*NakamaPeer_Frame)(nil),          // 1: nakama.peer.NakamaPeer.Frame
	(*NakamaPeer_State)(nil),          // 2: nakama.peer.NakamaPeer.State
	(*NakamaPeer_Envelope)(nil),       // 3: nakama.peer.NakamaPeer.Envelope
	(*NakamaPeer_Untrack)(nil),        // 4: nakama.peer.NakamaPeer.Untrack
	(*NakamaPeer_Status)(nil),         // 5: nakama.peer.NakamaPeer.Status
	(*NakamaPeer_Presence)(nil),       // 6: nakama.peer.NakamaPeer.Presence
	(*NakamaPeer_PresenceStream)(nil), // 7: nakama.peer.NakamaPeer.PresenceStream
	(*NakamaPeer_PresenceMeta)(nil),   // 8: nakama.peer.NakamaPeer.PresenceMeta
	(*NakamaPeer_NodeMeta)(nil),       // 9: nakama.peer.NakamaPeer.NodeMeta
	nil,                               // 10: nakama.peer.NakamaPeer.Frame.InfectedEntry
	nil,                               // 11: nakama.peer.NakamaPeer.Envelope.ContextEntry
	nil,                               // 12: nakama.peer.NakamaPeer.NodeMeta.VarsEntry
	(*timestamppb.Timestamp)(nil),     // 13: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),      // 14: google.protobuf.BoolValue
	(*Envelope)(nil),                  // 15: nakama.realtime.Envelope
}
var file_peer_proto_depIdxs = []int32{
	13, // 0: nakama.peer.NakamaPeer.Frame.timestamp:type_name -> google.protobuf.Timestamp
	14, // 1: nakama.peer.NakamaPeer.Frame.gossip:type_name -> google.protobuf.BoolValue
	10, // 2: nakama.peer.NakamaPeer.Frame.infected:type_name -> nakama.peer.NakamaPeer.Frame.InfectedEntry
	3,  // 3: nakama.peer.NakamaPeer.Frame.envelope:type_name -> nakama.peer.NakamaPeer.Envelope
	3,  // 4: nakama.peer.NakamaPeer.Frame.kickedOut:type_name -> nakama.peer.NakamaPeer.Envelope
	5,  // 5: nakama.peer.NakamaPeer.Frame.status:type_name -> nakama.peer.NakamaPeer.Status
	6,  // 6: nakama.peer.NakamaPeer.Frame.track:type_name -> nakama.peer.NakamaPeer.Presence
	4,  // 7: nakama.peer.NakamaPeer.Frame.untrack:type_name -> nakama.peer.NakamaPeer.Untrack
	3,  // 8: nakama.peer.NakamaPeer.Frame.broadcast:type_name -> nakama.peer.NakamaPeer.Envelope
	6,  // 9: nakama.peer.NakamaPeer.Frame.trackUpdate:type_name -> nakama.peer.NakamaPeer.Presence
	1,  // 10: nakama.peer.NakamaPeer.State.frames:type_name -> nakama.peer.NakamaPeer.Frame
	6,  // 11: nakama.peer.NakamaPeer.State.Presences:type_name -> nakama.peer.NakamaPeer.Presence
	11, // 12: nakama.peer.NakamaPeer.Envelope.context:type_name -> nakama.peer.NakamaPeer.Envelope.ContextEntry
	15, // 13: nakama.peer.NakamaPeer.Envelope.nakamaEnvelope:type_name -> nakama.realtime.Envelope
	7,  // 14: nakama.peer.NakamaPeer.Untrack.stream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	7,  // 15: nakama.peer.NakamaPeer.Untrack.skipStream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	7,  // 16: nakama.peer.NakamaPeer.Presence.stream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	8,  // 17: nakama.peer.NakamaPeer.Presence.meta:type_name -> nakama.peer.NakamaPeer.PresenceMeta
	12, // 18: nakama.peer.NakamaPeer.NodeMeta.vars:type_name -> nakama.peer.NakamaPeer.NodeMeta.VarsEntry
	3,  // 19: nakama.peer.NakamaPeerApi.Call:input_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 20: nakama.peer.NakamaPeerApi.Stream:input_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 21: nakama.peer.NakamaPeerApi.Call:output_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 22: nakama.peer.NakamaPeerApi.Stream:output_type -> nakama.peer.NakamaPeer.Envelope
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	file_realtime_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_peer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Untrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_PresenceStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_PresenceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_NodeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NakamaPeer_Frame_Envelope)(nil),
		(*NakamaPeer_Frame_KickedOut)(nil),
		(*NakamaPeer_Frame_Status)(nil),
		(*NakamaPeer_Frame_Track)(nil),
		(*NakamaPeer_Frame_Untrack)(nil),
		(*NakamaPeer_Frame_Broadcast)(nil),
		(*NakamaPeer_Frame_TrackUpdate)(nil),
	}
	file_peer_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*NakamaPeer_Envelope_NakamaEnvelope)(nil),
		(*NakamaPeer_Envelope_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
